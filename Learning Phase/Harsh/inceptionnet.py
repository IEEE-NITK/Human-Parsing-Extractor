# -*- coding: utf-8 -*-
"""inceptionNet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YVO8vbOHurOht6znM67CZ6mKwNN0cPt0
"""

from __future__ import print_function
import argparse
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torchvision import datasets, transforms
from torch.autograd import Variable
batch_size = 60

#mnist
train_dataset = datasets.MNIST(root='./data/',
                               train=True,
                               transform=transforms.ToTensor(),
                               download=True)

test_dataset = datasets.MNIST(root='./data/',
                              train=False,
                              transform=transforms.ToTensor())

#data loder
#training set
train_loader = torch.utils.data.DataLoader(dataset=train_dataset,
                                           batch_size=batch_size,
                                           shuffle=True)
#test set
test_loader = torch.utils.data.DataLoader(dataset=test_dataset,
                                          batch_size=batch_size,
                                          shuffle=True)


class InceptionNet(nn.Module):

    def __init__(self, in_channels):
        super(InceptionNet, self).__init__()
        self.branch1x1 = nn.Conv2d(in_channels, 16, kernel_size=1)

        self.branch5x5a = nn.Conv2d(in_channels, 16, kernel_size=1)
        self.branch5x5b = nn.Conv2d(16, 24, kernel_size=5, padding=2)

        self.branch3x3dbla = nn.Conv2d(in_channels, 16, kernel_size=1)
        self.branch3x3dblb = nn.Conv2d(16, 24, kernel_size=3, padding=1)
        self.branch3x3dblc = nn.Conv2d(24, 24, kernel_size=3, padding=1)

        self.branch_pool = nn.Conv2d(in_channels, 24, kernel_size=1)

    def forward(self, x):
        branch1x1 = self.branch1x1(x)

        branch5x5 = self.branch5x5a(x)
        branch5x5 = self.branch5x5b(branch5x5)

        branch3x3dbl = self.branch3x3dbla(x)
        branch3x3dbl = self.branch3x3dblb(branch3x3dbl)
        branch3x3dbl = self.branch3x3dblc(branch3x3dbl)

        branch_pool = F.avg_pool2d(x, kernel_size=3, stride=1, padding=1)
        branch_pool = self.branch_pool(branch_pool)

        return torch.cat([branch1x1, branch5x5, branch3x3dbl, branch_pool], 1)


class Net(nn.Module):

    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(1, 10, kernel_size=5)
        self.conv2 = nn.Conv2d(88, 20, kernel_size=5)

        self.inception1 = InceptionNet(in_channels=10)
        self.inception2 = InceptionNet(in_channels=20)

        self.mp = nn.MaxPool2d(2)
        self.fc = nn.Linear(1408, 10)

    def forward(self, x):
        in_size = x.size(0)
        x = F.relu(self.mp(self.conv1(x)))
        x = self.inception1(x)
        x = F.relu(self.mp(self.conv2(x)))
        x = self.inception2(x)
        x = x.view(in_size, -1)  # flatten the tensor
        x = self.fc(x)
        return F.log_softmax(x)


model = Net()

optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.7)


def train(epoch):
    model.train()
    #print("size of training data: ",len(train_loader))
    for i, (x, y) in enumerate(train_loader):
        x, y = Variable(x), Variable(y)
        optimizer.zero_grad()
        y_pred = model(x)
        loss = F.nll_loss(y_pred, y)
        loss.backward()
        optimizer.step()
        
        if i % 20 == 0:
            print("Epoch: ",epoch," ",i * len(x)," ",100. * i / len(train_loader),"%   Loss: ",loss.item())


def test():
    model.eval()
    loss = 0
    correct = 0
    for x, y in test_loader:
        x, y = Variable(x, volatile=True), Variable(y)
        y_pred = model(x)
        loss += F.nll_loss(y_pred, y, size_average=False).item()
        pred = y_pred.data.max(1, keepdim=True)[1]
        correct += pred.eq(y.data.view_as(pred)).cpu().sum()

    loss /= len(test_loader.dataset)
    #percent=100. * correct / len(test_loader.dataset)
    percent = 100*(correct/len(test_loader.dataset))
    print("\nTest data: ", "Avg. loss:",loss," Accuracy:",percent)

for epoch in range(1, 10):
    train(epoch)
    test()