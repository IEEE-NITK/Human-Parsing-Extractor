# -*- coding: utf-8 -*-
"""linear_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ml4LG-4q_sW7VCq5OIocD7xm7owiuepa
"""

from torch import nn
import torch
from torch import tensor

x_data = tensor([[1.0], [2.0], [3.0]])
y_data = tensor([[3.0], [5.999], [6.001]])

class Model(nn.Module):
    def __init__(self):
        
        super(Model, self).__init__()
        self.linear = torch.nn.Linear(1, 1)

    def forward(self, x):
       
        y_pred = self.linear(x)
        return y_pred

model = Model()

#constructing loss and optimizer
criterion = nn.MSELoss(size_average=None)
optimizer = torch.optim.SGD(model.parameters(), lr=0.02)

#Training our data
for epoch in range(500):
    #forward pass
    y_pred = model(x_data)

    #compute loss
    l = criterion(y_pred, y_data)
    print("epoch : ", epoch,"loss:", l.item() )

    
    #setting gradient to zero, doing backward pass and updating the weights
    optimizer.zero_grad()
    l.backward()
    optimizer.step()

print("Prediction ",  4, model(tensor([[4.0]])).data[0][0].item())